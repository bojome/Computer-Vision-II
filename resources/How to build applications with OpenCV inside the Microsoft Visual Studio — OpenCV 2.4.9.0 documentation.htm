<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0112)http://docs.opencv.org/doc/tutorials/introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv.html -->
<html xmlns="http://www.w3.org/1999/xhtml"><script>var urchinTracker=function(){},_gaq={push:function(){try {if(arguments[0][0]=='_link')window.location.href=arguments[0][1]}catch(er){}}},_gat={_createTracker:function(){}, _getTracker:function(){return{__noSuchMethod__:function(){},_link:function(o){if(o)location.href=o;},_linkByPost:function(){return true;},_getLinkerUrl:function(o){return o;},_trackEvent:function(){}}}};</script><script type="text/javascript" async="" src="http://www.google-analytics.com/ga.js"></script><script>(function installFakeGeolocationCode() {
  var timerId = null;
  if (!navigator.geolocation) {
    return;
  }
  navigator.geolocation.getCurrentPosition_ = navigator.geolocation.getCurrentPosition;
  navigator.geolocation.watchPosition_ = navigator.geolocation.watchPosition;
  navigator.geolocation.clearWatch_ = navigator.geolocation.clearWatch;

  navigator.geolocation.clearWatch = function (id) {
    window.clearInterval(id);
  };

  function sendBackResponse (successCb, errorCb, options, jsonedResponse) {
    var response = JSON.parse(jsonedResponse);
    if (response.isEnabled) {
      successCb({ 'coords': { 'latitude': response.lat, 'longitude': response.lng,
        'accuracy': response.accuracy }, 'timestamp': new Date().getTime() });
    } else {
      navigator.geolocation.getCurrentPosition_(successCb, errorCb, options);
    }
  }

  function createGetFakePosition(successCb, errorCb, options) {
    return function () {
      var positionElement = document.getElementById('fake_position_meta');
      if (!positionElement) {
        var interval = setInterval(function() {
          positionElement = document.getElementById('fake_position_meta');
          if (positionElement) {
            clearInterval(interval);
            sendBackResponse(successCb, errorCb, options, positionElement.getAttribute('content'));
          }
        }, 200 /* ms */);
      } else {
        // we already have the div, no need for intervals etc.
        sendBackResponse(successCb, errorCb, options, positionElement.getAttribute('content'));
      }
    };
  };

  navigator.geolocation.getCurrentPosition = function (cb1, cb2, options) {
    var getFakePosition = createGetFakePosition(cb1, cb2, options);
    getFakePosition();
  };

  navigator.geolocation.watchPosition = function (cb1, cb2, options) {
    var getFakePosition = createGetFakePosition(cb1, cb2, options);
    getFakePosition();
    if (timerId) {
      window.clearInterval(timerId);
    }
    timerId = window.setInterval(getFakePosition, 5 * 1000);
    return timerId;
  };
})();</script><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-33108845-1']);
  _gaq.push(['_setDomainName', 'opencv.org']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>


  
    
    
    <title>How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation</title>
    <link rel="stylesheet" href="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/default.css" type="text/css">
    <link rel="stylesheet" href="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/pygments.css" type="text/css">
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../../../../',
        VERSION:     '2.4.9.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script><style type="text/css"></style>
    <script type="text/javascript" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/jquery.js"></script>
    <script type="text/javascript" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/underscore.js"></script>
    <script type="text/javascript" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/doctools.js"></script>
    <script type="text/javascript" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/insertIframe.js"></script>
    <link rel="top" title="OpenCV 2.4.9.0 documentation" href="http://docs.opencv.org/index.html">
    <link rel="up" title="Introduction to OpenCV" href="http://docs.opencv.org/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html">
    <link rel="next" title="Image Watch: viewing in-memory images in the Visual Studio debugger" href="http://docs.opencv.org/doc/tutorials/introduction/windows_visual_studio_image_watch/windows_visual_studio_image_watch.html">
    <link rel="prev" title="Installation in Windows" href="http://docs.opencv.org/doc/tutorials/introduction/windows_install/windows_install.html"> 
  <style>@-webkit-keyframes poperibdwkdalvbbdfgvidndhglyxgvibyuqoywxxnb {50% {-webkit-transform:scale(1.2);}100% {-webkit-transform:scale(1);}}@keyframes poperibdwkdalvbbdfgvidndhglyxgvibyuqoywxxnb {50% {-webkit-transform:scale(1.2);transform:scale(1.2);}100% {-webkit-transform:scale(1);transform:scale(1);}}#eribdwkdalvbbdfgvidndhglyxgvibyuqoywxxnb{padding:0;margin:0;font:13px Arial,Helvetica;text-transform:none;font-size: 100%;vertical-align:baseline;line-height:normal;color:#fff;border:solid 2px #fff !important;box-sizing:content-box !important;color:#fff !important;display:block !important;height:auto !important;margin:0 !important;opacity:0.9 !important;padding:7px 10px !important;position:fixed !important;visibility:visible !important;width:auto !important;z-index:2147483647 !important;-webkit-border-radius:5px !important;-webkit-box-shadow:0px 0px 20px #000 !important;-webkit-box-sizing:content-box !important;}.eribdwkdalvbbdfgvidndhglyxgvibyuqoywxxnb-blocked{padding:0;margin:0;font:13px Arial,Helvetica;text-transform:none;font-size: 100%;vertical-align:baseline;line-height:normal;color:#fff;color:#AAA !important;display:inline !important;text-decoration:line-through !important;}#eribdwkdalvbbdfgvidndhglyxgvibyuqoywxxnb br{display:block !important;padding:0;margin:0;font:13px Arial,Helvetica;text-transform:none;font-size: 100%;vertical-align:baseline;line-height:normal;color:#fff;}#eribdwkdalvbbdfgvidndhglyxgvibyuqoywxxnb span{background:transparent !important;padding:0;margin:0;font:13px Arial,Helvetica;text-transform:none;font-size: 100%;vertical-align:baseline;line-height:normal;color:#fff;}#eribdwkdalvbbdfgvidndhglyxgvibyuqoywxxnb div{padding:0;margin:0;font:13px Arial,Helvetica;text-transform:none;font-size: 100%;vertical-align:baseline;line-height:normal;color:#fff;border:0 !important;margin:0 !important;padding:0 !important;width:auto !important;letter-spacing:normal !important;font:13px Arial,Helvetica !important;text-align:left !important;text-shadow:none !important;text-transform:none !important;word-spacing:normal !important;}#eribdwkdalvbbdfgvidndhglyxgvibyuqoywxxnb a{padding:0;margin:0;font:13px Arial,Helvetica;text-transform:none;font-size: 100%;vertical-align:baseline;line-height:normal;color:#fff;font-weight:normal !important;background:none !important;text-decoration:underline !important;color:#fff !important;}a#eribdwkdalvbbdfgvidndhglyxgvibyuqoywxxnb-gear{padding:0;margin:0;font:13px Arial,Helvetica;text-transform:none;font-size: 100%;vertical-align:baseline;line-height:normal;color:#fff;text-decoration:none !important;position:absolute !important;display:none !important;font-size:20px !important;width:20px !important;height:20px !important;line-height:20px !important;text-align:center !important;background-color:rgba(255,255,255,.8) !important;background-image:url(chrome-extension://mlomiejdfkolichcflejclcbmpeaniij/data/images/gear.svg) !important;background-size:16px 16px !important;background-position:center center !important;background-repeat:no-repeat !important;text-decoration:none !important;}a#eribdwkdalvbbdfgvidndhglyxgvibyuqoywxxnb-gear:hover{-webkit-animation-name:poperibdwkdalvbbdfgvidndhglyxgvibyuqoywxxnb !important;animation-name:poperibdwkdalvbbdfgvidndhglyxgvibyuqoywxxnb !important;-webkit-animation-duration:0.3s !important;animation-duration:0.3s !important;}#eribdwkdalvbbdfgvidndhglyxgvibyuqoywxxnb:hover #eribdwkdalvbbdfgvidndhglyxgvibyuqoywxxnb-gear{text-decoration:none !important;display:inline-block !important;}@media print{#eribdwkdalvbbdfgvidndhglyxgvibyuqoywxxnb{display:none !important;}}</style></head><meta id="fake_position_meta" name="fake_geolocation_chrome_extension" content="{}">
  <body>
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="http://docs.opencv.org/genindex.html" title="General Index" accesskey="I">index</a></li>
        <li class="right">
          <a href="http://docs.opencv.org/doc/tutorials/introduction/windows_visual_studio_image_watch/windows_visual_studio_image_watch.html" title="Image Watch: viewing in-memory images in the Visual Studio debugger" accesskey="N">next</a> |</li>
        <li class="right">
          <a href="http://docs.opencv.org/doc/tutorials/introduction/windows_install/windows_install.html" title="Installation in Windows" accesskey="P">previous</a> |</li>
        <li><a href="http://docs.opencv.org/index.html">OpenCV 2.4.9.0 documentation</a> »</li>
          <li><a href="http://docs.opencv.org/doc/tutorials/tutorials.html">OpenCV Tutorials</a> »</li>
          <li><a href="http://docs.opencv.org/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html" accesskey="U">Introduction to OpenCV</a> »</li> 
      </ul>
    </div>  

    <div class="document">
  
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
            
  <div class="section" id="how-to-build-applications-with-opencv-inside-the-microsoft-visual-studio">
<span id="windows-visual-studio-how-to"></span><h1>How to build applications with OpenCV inside the <em>Microsoft Visual Studio</em><a class="headerlink" href="http://docs.opencv.org/doc/tutorials/introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv.html#how-to-build-applications-with-opencv-inside-the-microsoft-visual-studio" title="Permalink to this headline">¶</a></h1>
<p>Everything I describe here will apply to the C\C++ interface of OpenCV.
I start out from the assumption that you have read and completed with success the <a class="reference internal" href="http://docs.opencv.org/doc/tutorials/introduction/windows_install/windows_install.html#windows-installation"><em>Installation in Windows</em></a> tutorial. Therefore, before you go any further make sure you have an OpenCV directory that contains the OpenCV header files plus binaries and you have set the environment variables as <a class="reference internal" href="http://docs.opencv.org/doc/tutorials/introduction/windows_install/windows_install.html#windowssetpathandenviromentvariable"><em>described here</em></a>.</p>
<img alt="You should have a folder looking like this." class="align-center" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/OpenCV_Install_Directory.jpg">
<p>The OpenCV libraries, distributed by us, on the Microsoft Windows operating system are in a <strong>D</strong>ynamic <strong>L</strong>inked <strong>L</strong>ibraries (<em>DLL</em>). These have the advantage that all the content of the library are loaded only at runtime, on demand, and that countless programs may use the same library file. This means that if you have ten applications using the OpenCV library, no need to have around a version for each one of them. Of course you need to have the <em>dll</em> of the OpenCV on all systems where you want to run your application.</p>
<p>Another approach is to use static libraries that have <em>lib</em> extensions. You may build these by using our source files as described in the <a class="reference internal" href="http://docs.opencv.org/doc/tutorials/introduction/windows_install/windows_install.html#windows-installation"><em>Installation in Windows</em></a> tutorial. When you use this the library will be built-in inside your <em>exe</em> file.  So there is no chance that the user deletes them, for some reason. As a drawback your application will be larger one and as, it will take more time to load it during its startup.</p>
<p>To build an application with OpenCV you need to do two things:</p>
<div class="enumeratevisibleitemswithsquare container">
<ul>
<li><p class="first"><em>Tell</em> to the compiler how the OpenCV library <em>looks</em>. You do this by <em>showing</em> it the header files.</p>
</li>
<li><p class="first"><em>Tell</em> to the linker from where to get the functions or data structures of OpenCV, when they are needed.</p>
<p>If you use the <em>lib</em> system you must set the path where the library files are and specify in which one of them to look. During the build the linker will look into these libraries and add the definitions and implementation of all <em>used</em> functions and data structures to the executable file.</p>
<p>If you use the <em>DLL</em> system you must again specify all this, however now for a different reason. This is a Microsoft OS specific stuff. It seems that the linker needs to know that where in the DLL to search for the data structure or function at the runtime. This information is stored inside <em>lib</em> files. Nevertheless, they aren’t static libraries. They are so called import libraries. This is why when you make some <em>DLLs</em> in Windows you will also end up with some <em>lib</em> extension libraries. The good part is that at runtime only the <em>DLL</em> is required.</p>
</li>
</ul>
</div>
<p>To pass on all this information to the Visual Studio IDE you can either do it globally (so all your future projects will get these information) or locally (so only for you current project). The advantage of the global one is that you only need to do it once; however, it may be undesirable to clump all your projects all the time with all these information. In case of the global one how you do it depends on the Microsoft Visual Studio you use. There is a <strong>2008 and previous versions</strong> and a <strong>2010 way</strong> of doing it. Inside the global section of this tutorial I’ll show what the main differences are.</p>
<p>The base item of a project in Visual Studio is a solution. A solution may contain multiple projects. Projects are the building blocks of an application. Every project will realize something and you will have a main project in which you can put together this project puzzle. In case of the many simple applications (like many of the tutorials will be) you do not need to break down the application into modules. In these cases your main project will be the only existing one. Now go create a new solution inside Visual studio by going through the <em class="menuselection">File ‣ New ‣ Project</em> menu selection. Choose <em>Win32 Console Application</em> as type. Enter its name and select the path where to create it. Then in the upcoming dialog make sure you create an empty project.</p>
<img alt="Which options to select" class="align-center" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/NewProjectVisualStudio.jpg">
<div class="section" id="the-local-method">
<h2>The <em>local</em> method<a class="headerlink" href="http://docs.opencv.org/doc/tutorials/introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv.html#the-local-method" title="Permalink to this headline">¶</a></h2>
<p>Every project is built separately from the others. Due to this every project has its own rule package. Inside this rule packages are stored all the information the <em>IDE</em> needs to know to build your project. For any application there are at least two build modes: a <em>Release</em> and a <em>Debug</em> one. The <em>Debug</em> has many features that exist so you can find and resolve easier bugs inside your application. In contrast the <em>Release</em> is an optimized version, where the goal is to make the application run as fast as possible or to be as small as possible. You may figure that these modes also require different rules to use during build. Therefore, there exist different rule packages for each of your build modes. These rule packages are called inside the IDE as <em>project properties</em> and you can view and modify them by using the <em>Property Manger</em>. You can bring up this with <em class="menuselection">View ‣ Property Pages</em>. Expand it and you can see the existing rule packages (called <em>Proporty Sheets</em>).</p>
<img alt="An example of Property Sheet" class="align-center" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/PropertyPageExample.jpg">
<p>The really useful stuff of these is that you may create a rule package <em>once</em> and you can later just add it to your new projects. Create it once and reuse it later. We want to create a new <em>Property Sheet</em> that will contain all the rules that the compiler and linker needs to know. Of course we will need a separate one for the Debug and the Release Builds. Start up with the Debug one as shown in the image below:</p>
<img alt="Add a new Property Sheet" class="align-center" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/AddNewPropertySheet.jpg">
<p>Use for example the <em>OpenCV_Debug</em> name. Then by selecting the sheet <em class="menuselection">Right Click ‣ Properties</em>. In the following I will show to set the OpenCV rules locally, as I find unnecessary to pollute projects with custom rules that I do not use it. Go the C++ groups General entry and under the <em>“Additional Include Directories”</em> add the path to your OpenCV include. If you don’t have <em>“C/C++”</em> group, you should add any .c/.cpp file to the project.</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="k">$(</span>OPENCV_DIR<span class="k">)</span><span class="se">\.</span>.<span class="se">\.</span>.<span class="se">\i</span>nclude
</pre></div>
</div>
<img alt="Add the include dir like this." class="align-center" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/PropertySheetOpenCVInclude.jpg">
<p>When adding third party libraries settings it is generally a good idea to use the power behind the environment variables. The full location of the OpenCV library may change on each system. Moreover, you may even end up yourself with moving the install directory for some reason. If you would give explicit paths inside your property sheet your project will end up not working when you pass it further to someone else who has a different OpenCV install path. Moreover, fixing this would require to manually modifying every explicit path. A more elegant solution is to use the environment variables. Anything that you put inside a parenthesis started with a dollar sign will be replaced at runtime with the current environment variables value. Here comes in play the environment variable setting we already made in our <a class="reference internal" href="http://docs.opencv.org/doc/tutorials/introduction/windows_install/windows_install.html#windowssetpathandenviromentvariable"><em>previous tutorial</em></a>.</p>
<p>Next go to the <em class="menuselection">Linker ‣ General</em> and under the <em>“Additional Library Directories”</em> add the libs directory:</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="k">$(</span>OPENCV_DIR<span class="k">)</span><span class="se">\l</span>ib
</pre></div>
</div>
<img alt="Add the library folder like this." class="align-center" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/PropertySheetOpenCVLib.jpg">
<p>Then you need to specify the libraries in which the linker should look into. To do this go to the <em class="menuselection">Linker ‣ Input</em> and under the <em>“Additional Dependencies”</em> entry add the name of all modules which you want to use:</p>
<img alt="Add the debug library names here." class="align-center" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/PropertySheetOpenCVLibrariesDebugSmple.jpg">
<img alt="Like this." class="align-center" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/PropertySheetOpenCVLibrariesDebug.jpg">
<p>The names of the libraries are as follow:</p>
<div class="highlight-bash"><div class="highlight"><pre>opencv_<span class="o">(</span>The Name of the module<span class="o">)(</span>The version Number of the library you use<span class="o">)</span>d.lib
</pre></div>
</div>
<p>A full list, for the latest version would contain:</p>
<div class="highlight-bash"><div class="highlight"><pre>opencv_core231d.lib
opencv_imgproc231d.lib
opencv_highgui231d.lib
opencv_ml231d.lib
opencv_video231d.lib
opencv_features2d231d.lib
opencv_calib3d231d.lib
opencv_objdetect231d.lib
opencv_contrib231d.lib
opencv_legacy231d.lib
opencv_flann231d.lib
</pre></div>
</div>
<p>The letter <em>d</em> at the end just indicates that these are the libraries required for the debug. Now click ok to save and do the same with a new property inside the Release rule section. Make sure to omit the <em>d</em> letters from the library names and to save the property sheets with the save icon above them.</p>
<img alt="And the release ones." class="align-center" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/PropertySheetOpenCVLibrariesRelease.jpg">
<p>You can find your property sheets inside your projects directory. At this point it is a wise decision to back them up into some special directory, to always have them at hand in the future, whenever you create an OpenCV project. Note that for Visual Studio 2010 the file extension is <em>props</em>, while for 2008 this is <em>vsprops</em>.</p>
<img alt="And the release ones." class="align-center" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/PropertySheetInsideFolder.jpg">
<p>Next time when you make a new OpenCV project just use the “Add Existing Property Sheet...” menu entry inside the Property Manager to easily add the OpenCV build rules.</p>
<img alt="Use this option." class="align-center" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/PropertyPageAddExisting.jpg">
</div>
<div class="section" id="the-global-method">
<h2>The <em>global</em> method<a class="headerlink" href="http://docs.opencv.org/doc/tutorials/introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv.html#the-global-method" title="Permalink to this headline">¶</a></h2>
<p>In case you find to troublesome to add the property pages to each and every one of your projects you can also add this rules to a <em>“global property page”</em>. However, this applies only to the additional include and library directories. The name of the libraries to use you still need to specify manually by using for instance: a Property page.</p>
<p>In Visual Studio 2008 you can find this under the:  <em class="menuselection">Tools ‣ Options ‣ Projects and Solutions ‣ VC++ Directories</em>.</p>
<img alt="VC++ Directories in VS 2008." class="align-center" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/VCDirectories2008.jpg">
<p>In Visual Studio 2010 this has been moved to a global property sheet which is automatically added to every project you create:</p>
<img alt="VC++ Directories in VS 2010." class="align-center" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/VCDirectories2010.jpg">
<p>The process is the same as described in case of the local approach. Just add the include directories by using the environment variable <em>OPENCV_DIR</em>.</p>
</div>
<div class="section" id="test-it">
<h2>Test it!<a class="headerlink" href="http://docs.opencv.org/doc/tutorials/introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv.html#test-it" title="Permalink to this headline">¶</a></h2>
<p>Now to try this out download our little test <a class="reference download internal" href="http://docs.opencv.org/_downloads/introduction_windows_vs.cpp"><tt class="xref download docutils literal"><span class="pre">source</span> <span class="pre">code</span></tt></a> or get it from the sample code folder of the OpenCV sources. Add this to your project and build it. Here’s its content:</p>
<div class="highlight-cpp"><table class="highlighttable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30</pre></div></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;opencv2/core/core.hpp&gt;</span>
<span class="cp">#include &lt;opencv2/highgui/highgui.hpp&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">cv</span><span class="p">;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span>
    <span class="p">{</span>
     <span class="n">cout</span> <span class="o">&lt;&lt;</span><span class="s">" Usage: display_image ImageToLoadAndDisplay"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
     <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">Mat</span> <span class="n">image</span><span class="p">;</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">imread</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">IMREAD_COLOR</span><span class="p">);</span> <span class="c1">// Read the file</span>

    <span class="k">if</span><span class="p">(</span><span class="o">!</span> <span class="n">image</span><span class="p">.</span><span class="n">data</span> <span class="p">)</span> <span class="c1">// Check for invalid input</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Could not open or find the image"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span> <span class="p">;</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">namedWindow</span><span class="p">(</span> <span class="s">"Display window"</span><span class="p">,</span> <span class="n">WINDOW_AUTOSIZE</span> <span class="p">);</span> <span class="c1">// Create a window for display.</span>
    <span class="n">imshow</span><span class="p">(</span> <span class="s">"Display window"</span><span class="p">,</span> <span class="n">image</span> <span class="p">);</span> <span class="c1">// Show our image inside it.</span>

    <span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// Wait for a keystroke in the window</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div>
<p>You can start a Visual Studio build from two places. Either inside from the <em>IDE</em> (keyboard combination: <tt class="kbd docutils literal"><span class="pre">Control-F5</span></tt>) or by navigating to your build directory and start the application with a double click. The catch is that these two <strong>aren’t</strong> the same. When you start it from the <em>IDE</em> its current working directory is the projects directory, while otherwise it is the folder where the application file currently is (so usually your build directory). Moreover, in case of starting from the <em>IDE</em> the console window will not close once finished. It will wait for a keystroke of yours.</p>
<p>This is important to remember when you code inside the code open and save commands. You’re resources will be saved ( and queried for at opening!!!) relatively to your working directory. This is unless you give a full, explicit path as parameter for the I/O functions. In the code above we open <a class="reference download internal" href="http://docs.opencv.org/_downloads/opencv-logo.png"><tt class="xref download docutils literal"><span class="pre">this</span> <span class="pre">OpenCV</span> <span class="pre">logo</span></tt></a>. Before starting up the application make sure you place the image file in your current working directory. Modify the image file name inside the code to try it out on other images too. Run it and voilá:</p>
<img alt="You should have this." class="align-center" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/SuccessVisualStudioWindows.jpg">
</div>
<div class="section" id="command-line-arguments-with-visual-studio">
<h2>Command line arguments with Visual Studio<a class="headerlink" href="http://docs.opencv.org/doc/tutorials/introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv.html#command-line-arguments-with-visual-studio" title="Permalink to this headline">¶</a></h2>
<p>Throughout some of our future tutorials you’ll see that the programs main input method will be by giving a runtime argument. To do this you can just start up a commmand windows (<tt class="kbd docutils literal"><span class="pre">cmd</span> <span class="pre">+</span> <span class="pre">Enter</span></tt> in the start menu), navigate to your executable file and start it with an argument. So for example in case of my upper project this would look like:</p>
<div class="highlight-bash"><table class="highlighttable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre>D:
CD OpenCV<span class="se">\M</span>ySolutionName<span class="se">\R</span>elease
MySolutionName.exe exampleImage.jpg
</pre></div>
</td></tr></tbody></table></div>
<p>Here I first changed my drive (if your project isn’t on the OS local drive), navigated to my project and start it with an example image argument. While under Linux system it is common to fiddle around with the console window on the Microsoft Windows many people come to use it almost never. Besides, adding the same argument again and again while you are testing your application is, somewhat, a cumbersome task. Luckily, in the Visual Studio there is a menu to automate all this:</p>
<img alt="Visual Studio Command Line Arguments" class="align-center" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/VisualStudioCommandLineArguments.jpg">
<p>Specify here the name of the inputs and while you start your application from the Visual Studio enviroment you have automatic argument passing. In the next introductionary tutorial you’ll see an in-depth explanation of the upper source code: <a class="reference internal" href="http://docs.opencv.org/doc/tutorials/introduction/display_image/display_image.html#display-image"><em>Load and Display an Image</em></a>.</p>
</div>
</div>


          </div>
          <div class="feedback">
              <h2>Help and Feedback</h2>
              You did not find what you were looking for?
              <ul>
                  
                  
                  
                  <li>Ask a question on the <a href="http://answers.opencv.org/">Q&amp;A forum</a>.</li>
                  <li>If you think something is missing or wrong in the documentation,
                  please file a <a href="http://code.opencv.org/">bug report</a>.</li>
              </ul>
          </div>
        </div>
      </div>

      <div class="sphinxsidebar">
        <div class="sphinxsidebarwrapper">
            <p class="logo"><a href="http://docs.opencv.org/index.html">
              <img class="logo" src="./How to build applications with OpenCV inside the Microsoft Visual Studio — OpenCV 2.4.9.0 documentation_files/opencv-logo-white.png" alt="Logo">
            </a></p>
<div id="searchbox" style="">
      <form class="search" action="http://docs.opencv.org/search.html" method="get">
      <input type="text" name="q" size="18">
      <input type="submit" value="Search">
      <input type="hidden" name="check_keywords" value="yes">
      <input type="hidden" name="area" value="default">
      <p></p>
    </form>
</div>
<script type="text/javascript">$('#searchbox').show(0);</script>
  <h3><a href="http://docs.opencv.org/index.html">Table Of Contents</a></h3>
  <ul>
<li><a class="reference internal" href="http://docs.opencv.org/doc/tutorials/introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv.html#">How to build applications with OpenCV inside the <em>Microsoft Visual Studio</em></a><ul>
<li><a class="reference internal" href="http://docs.opencv.org/doc/tutorials/introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv.html#the-local-method">The <em>local</em> method</a></li>
<li><a class="reference internal" href="http://docs.opencv.org/doc/tutorials/introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv.html#the-global-method">The <em>global</em> method</a></li>
<li><a class="reference internal" href="http://docs.opencv.org/doc/tutorials/introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv.html#test-it">Test it!</a></li>
<li><a class="reference internal" href="http://docs.opencv.org/doc/tutorials/introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv.html#command-line-arguments-with-visual-studio">Command line arguments with Visual Studio</a></li>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class="topless"><a href="http://docs.opencv.org/doc/tutorials/introduction/windows_install/windows_install.html" title="previous chapter">Installation in Windows</a></p>
  <h4>Next topic</h4>
  <p class="topless"><a href="http://docs.opencv.org/doc/tutorials/introduction/windows_visual_studio_image_watch/windows_visual_studio_image_watch.html" title="next chapter">Image Watch: viewing in-memory images in the Visual Studio debugger</a></p>
  <h3>This Page</h3>
  <ul class="this-page-menu">
    <li><a href="http://docs.opencv.org/_sources/doc/tutorials/introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv.txt" rel="nofollow">Show Source</a></li>
  </ul>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="http://docs.opencv.org/genindex.html" title="General Index">index</a></li>
        <li class="right">
          <a href="http://docs.opencv.org/doc/tutorials/introduction/windows_visual_studio_image_watch/windows_visual_studio_image_watch.html" title="Image Watch: viewing in-memory images in the Visual Studio debugger">next</a> |</li>
        <li class="right">
          <a href="http://docs.opencv.org/doc/tutorials/introduction/windows_install/windows_install.html" title="Installation in Windows">previous</a> |</li>
        <li><a href="http://docs.opencv.org/index.html">OpenCV 2.4.9.0 documentation</a> »</li>
          <li><a href="http://docs.opencv.org/doc/tutorials/tutorials.html">OpenCV Tutorials</a> »</li>
          <li><a href="http://docs.opencv.org/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html">Introduction to OpenCV</a> »</li> 
      </ul>
    </div>
    <div class="footer">
        © Copyright 2011-2014, opencv dev team.
      Last updated on Apr 21, 2014.
      Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 1.1.3.
    </div>
  
</body></html>